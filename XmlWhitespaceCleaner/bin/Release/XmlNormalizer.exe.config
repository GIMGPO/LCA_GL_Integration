<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="parameterInfo" type="XmlNormalizer.GeneralSectionConfigHandler, XmlNormalizer" />
    <section name="fileTypes" type="XmlNormalizer.FileTypeSectionConfigHandler, XmlNormalizer" />
  </configSections>
  <appSettings>
    <add key="ClientSettingsProvider.ServiceUri" value="" />
  </appSettings>
  <parameterInfo>
    <parameters min="4" max="4">
      <parameterDescriptor index="0" type="System.String" name="inputFile" isInputFile="true" />
      <parameterDescriptor index="1" type="System.String" name="encoding" />
      <parameterDescriptor index="2" type="System.String" name="usage" />
      <parameterDescriptor index="3" type="System.String" name="configFile" isFile="true" />
    </parameters>
  </parameterInfo>
  <fileTypes>
    <!--  -->
    <fileType index="1" filter=".xml" docTypes="[XPATH LIST OF SUPPORTED DOCTYPES]" omitUtf8BOM="true">
      <!-- INSIDE xmlSpacePreserveScope, lists elements at or under which ALL nodes, including whitespace, linebreaks, etc. are written verbatim -->
      <xmlSpacePreserveScope>
      </xmlSpacePreserveScope>
      <!-- INSIDE xmlSpacePreserveScope, allows for the markup of string patterns as tags; useful e.g. for content protection.
           The type and notation of tags is indicated by the regex group name, whose individual characters have these meanings:
           - 1. 's' makes it a SDL custom tag (to avoid clashes)
           - 2. 'C' indicates Closed, or short-hand, notation <sCI v="text" />, 'O' indicates Open, long-hand notation: <sOI>text</sOI>
           - 3. 'I' indicates Inline, 'E' implies External 
           There is another type of tag, the "marker" tag (empty, with no attributes) which forces inclusion of content into a TU (leading whitespace):
           - 1. 's' makes it a SDL custom tag (to avoid clashes)
           - 2. 'M' identifies a Marker tag
           These tags, if used, must be declared in the applicable ANL file.
           -->
      <inlineTagging regex="(?m)(^(?'sM')|(?'sM')[\r\n]$)" />
      <!-- OUTSIDE xmlSpacePreserveScope, on nodes of type Text, specifies how to handle whitespace (including linebreaks): 
        - default value for regex = '\s+' (1 or more whitespace char)
        - default value for replace = ' ' (single space) -->
      <textNodeWhitespace regex="\s+" replace=" " />
      <!-- OUTSIDE xmlSpacePreserveScope, lists elements that are to be written with a linebreak (either before or after) 
        - type can be [unix|windows|mac] for writing linebreaks as '\n', '\r\'n and '\r' respectively
        - location can be [leading|trailing|both]. Note that 'both' can result in 2 contiguous linebreaks. -->
      <cosmeticLinebreaks type="unix" location="leading">
      </cosmeticLinebreaks>
    </fileType>
  </fileTypes>
  <system.web>
    <membership defaultProvider="ClientAuthenticationMembershipProvider">
      <providers>
        <add name="ClientAuthenticationMembershipProvider" type="System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" />
      </providers>
    </membership>
    <roleManager defaultProvider="ClientRoleProvider" enabled="true">
      <providers>
        <add name="ClientRoleProvider" type="System.Web.ClientServices.Providers.ClientRoleProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" cacheTimeout="86400" />
      </providers>
    </roleManager>
  </system.web>
</configuration>